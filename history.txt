 1022                      "name": "createStaticSiteCount",
 1023                      "value": 3
 1024                  },
 1025                  {
 1026                      "name": "staticSiteDomainCount",
 1027                      "value": 4
 1028                  },
 1029                  {
 1030                      "name": "deleteStaticSiteCount",
 1031                      "value": 5
 1032                  }
 1033              ]
 1034          }
 1035      ]
 1036  }' https://vicara226.webhook.office.com/webhookb2/2e56e471-996a-4e82-a7dc-bfcb1d616a9f@91758051-159a-45e9-bb70-714f7dd9de97/IncomingWebhook/bd8a13617f224d109fa56a8acc22c829/513e0dc2-9755-4f21-b8ad-bddc1373014c
 1037  exit
 1038  ssh root@68.183.81.238
 1039  exit
 1040  docker image ls
 1041  docker image rm registry.patr.cloud/personal-organisation-samyak-gangwal/developerfolio:latest 
 1042  docker image tag developerfolio:v3 registry.patr.cloud/personal-organisation-samyak-gangwal/developerfolio:latest
 1043  docker image push registry.patr.cloud/personal-organisation-samyak-gangwal/developerfolio
 1044  docker image rm 5766e7375ddf
 1045  ssh root@68.183.81.238
 1046  psql patr
 1047  psql postgres
 1048  psql vicaraDB 
 1049  cargo run http://127.0.0.1:3000
 1050  ngrok http 3000 -host-header="localhost:3000"
 1051  git pull --all
 1052  git config pull.rebase false
 1053  git pull --all
 1054  npm start
 1055  git pull --all
 1056  npm install
 1057  npm start
 1058  git branch
 1059  git checkout staging
 1060  git pull --all
 1061  git merge vicara/staging 
 1062  switch -c fix/deployment-analytics
 1063  git switch -c fix/deployment-analytics
 1064  git stash
 1065  git checkout staging
 1066  git push
 1067  git checkout -b fix/registry-rename
 1068  git stash pop
 1069  cd api
 1070  cargo sqlx prepare
 1071  cd ..
 1072  git add .
 1073  cargo +nightly fmt
 1074  git add .
 1075  cargo clippy
 1076  git add .
 1077  git commit -m "renamed a deleted repository instead of deleting it"
 1078  git push
 1079  git push --set-upstream origin fix/registry-rename
 1080  git branch
 1081  clear
 1082  git branch
 1083  git checkout fix/deployment-analytics 
 1084  clear
 1085  git stash
 1086  git checkout fix/registry-rename 
 1087  git checkout fix/deployment-analytics 
 1088  git stash pop
 1089  git add . 
 1090  git commit -m "WIP: metrics function"
 1091  git checkout fix/registry-rename 
 1092  cargo +nightly fmt
 1093  cargo clippy
 1094  git add .
 1095  cd api
 1096  cargo sqlx prepare
 1097  cd ..
 1098  git add .
 1099  git commit -m "added check for existing deployment"
 1100  git push
 1101  git checkout fix/registry-rename 
 1102  git checkout fix/deployment-analytics 
 1103  git stash
 1104  git checkout staging 
 1105  git checkout -b fix/static-site-domain
 1106  git add .
 1107  cargo +nightly fmt
 1108  git add .
 1109  git commit -m "fixed domain deletion in static site"
 1110  git push
 1111  git push --set-upstream origin fix/static-site-domain
 1112  git branch
 1113  git checkout fix/deployment-analytics 
 1114  git stash pop
 1115  cargo +nightly fmt
 1116  cd api
 1117  cargo sqlx prepare
 1118  cd ..
 1119  cargo run
 1120  cargo +nightly fmt
 1121  git add .
 1122  git commit -m "Added metrics for meauring the number of current users, number of deployments made, number of static sites and databases"
 1123  git push
 1124  git branch
 1125  git checkout fix/registry-rename 
 1126  cargo run
 1127  SQLX_OFFLINE=true cargo populate
 1128  cd api
 1129  cargo sqlx prepare
 1130  cd ..
 1131  SQLX_OFFLINE=true cargo populate
 1132  cd api
 1133  cargo sqlx prepare
 1134  cd ..
 1135  SQLX_OFFLINE=true cargo populate
 1136  cd api
 1137  cargo sqlx prepare
 1138  cd ..
 1139  cargo run
 1140  cd api
 1141  cargo sqlx prepare
 1142  cd ..
 1143  cargo run
 1144  git add .
 1145  cd api
 1146  cargo sqlx prepare
 1147  cd ..
 1148  cargo +nightly fmt
 1149  git add .
 1150  git commit -m "modified get list of repositories so that the deleted ones cannot be retreived"
 1151  git push
 1152  git checkout fix/deployment-analytics 
 1153  cd api 
 1154  cargo sqlx prepare
 1155  cd ..
 1156  git add .
 1157  cargo run
 1158  git add .
 1159  git branch
 1160  cargo +nightly fmt
 1161  git add .
 1162  git commit -m "renamed USERS_TO_SIGN_UP constant"
 1163  git push
 1164  cargo +nightly fmt
 1165  cargo clippy
 1166  git add .
 1167  git commit -m "changed the api version to 0.4.8, added the migrations for the same"
 1168  git push
 1169  cargo +nightly fmt
 1170  git add .
 1171  git commit -m "added total resources and websites in metrics"
 1172  git push
 1173  cargo clippy
 1174  cargo +nightly fmt
 1175  git add .
 1176  cargo run
 1177  git add .
 1178  cargo +nightly fmt
 1179  git add .
 1180  cargo clippy
 1181  git add .
 1182  git commit -m "removed '?' from await in routes layer"
 1183  git push
 1184  git add .
 1185  git commit -m "removed spaces and replaced them with tabs"
 1186  git push
 1187  git checkout vicara/hotfix/0.4.8
 1188  git pull --all
 1189  git checkout vicara/hotfix/0.4.8
 1190  cargo clippy
 1191  git switch -c fix/docker-registry-repository
 1192  git add .
 1193  cargo +nightly fmt
 1194  git add .
 1195  git commit -m "clippy
 1196  git commit -m "clippy"
 1197  git push
 1198  git push --set-upstream origin fix/docker-registry-repository
 1199  uptime
 1200  exit
 1201  git branch
 1202  git checkout staging
 1203  git pull --all
 1204  git merge vicara/staging 
 1205  git push
 1206  git checkout -b fix/0.4.8-bug-fix
 1207  cargo +nightly fmt
 1208  cargo clippy
 1209  git add .
 1210  cargo +nightly fmt
 1211  git add .
 1212  git commit -m "made the domain name filtering method same as the one in routes/deployments.rs for routes/static-sites.rs, fixed total websites bug: replaced create_database count with create_deployment_count"
 1213  git push
 1214  cargo +nightly fmt
 1215  clear
 1216  cargo run
 1217  clear
 1218  cargo run
 1219  clear
 1220  cargo run
 1221  clear
 1222  cargo run
 1223  clear
 1224  cargo run
 1225  clear
 1226  cargo +nightly fmt
 1227  clear
 1228  cargo run
 1229  clear
 1230  cargo run
 1231  clear
 1232  cargo run
 1233  clear
 1234  cargo run
 1235  clear
 1236  cargo run
 1237  clear
 1238  cargo run
 1239  clear
 1240  cargo run
 1241  clear
 1242  cargo +nightly fmt
 1243  clear
 1244  cargo run
 1245  clear
 1246  cargo run
 1247  cargo run
 1248  cd /tmp
 1249  ls
 1250  cat server-text.txt 
 1251  rm server-text.txt 
 1252  exit
 1253  clear
 1254  cargo run
 1255  clear
 1256  cargo run
 1257  git pull --all
 1258  clear
 1259  nc -l 3000
 1260  lear
 1261  clear
 1262  exit
 1263  clear
 1264  cargo +nightly fmt
 1265  clear
 1266  cd Downloads/
 1267  clear
 1268  # Download and extract
 1269  curl -L https://github.com/nwtgck/piping-server-rust/releases/download/v0.9.0/piping-server-x86-64-linux.tar.gz | tar xzf -
 1270  # Run on 8181 port
 1271  ./piping-server-x86-64-linux/piping-server --http-port=8181
 1272  clear
 1273  exit
 1274  echo 'hello, world' | curl -T - localhost:8080/s
 1275  echo 'hello, world' | curl -T - localhost:8181/s
 1276  seq inf --help
 1277  seq inf | curl -T - localhost:-8181/s
 1278  seq inf | curl -T - localhost:8181/s
 1279  exit
 1280  cd Downloads/
 1281  cd ..
 1282  clear
 1283  cd home/samyak/
 1284  git clone git@github.com:nwtgck/piping-server-rust.git
 1285  cd piping-server-rust/
 1286  clear
 1287  piping-server
 1288  curl -X GET   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   "https://api.digitalocean.com/v2/databases/da0e761d-ae88-4a1c-b7b5-302f04e2d3f0"
 1289  curl -X GET   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   "https://api.digitalocean.com/v2/databases/da0e761d-ae88-4a1c-b7b5-302f04e2d3f0"
 1290  exit
 1291  ssh root@68.183.81.238
 1292  exit
 1293  curl -X GET   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   "https://api.digitalocean.com/v2/databases/da0e761d-ae88-4a1c-b7b5-302f04e2d3f0"
 1294  clear
 1295  curl -X GET HEAD -i   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   "https://api.digitalocean.com/v2/databases/da0e761d-ae88-4a1c-b7b5-302f04e2d3f0"
 1296  exit
 1297  psql vicaraDB
 1298  clear
 1299  psql vicaraDB
 1300  exit
 1301  exit
 1302  cargo run
 1303  clear
 1304  cargo run
 1305  clear
 1306  cargo run
 1307  clear
 1308  cargo run
 1309  clear
 1310  cargo run
 1311  clear
 1312  exit
 1313  curl localhost:8080
 1314  clear
 1315  exit
 1316  cargo +nightly fmt
 1317  clear
 1318  exit
 1319  ssh root@68.183.81.238
 1320  curl -X GET HEAD -i   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   "https://api.digitalocean.com/v2/databases/da0e761d-ae88-4a1c-b7b5-302f04e2d3f0"
 1321  exit
 1322  ssh root@68.183.81.238
 1323  clear
 1324  curl -X POST   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   -d '{"name": "digitalocean-db-cluster-123456789", "engine": "mysql", "version": "8", "region": "blr1", "size": "db-s-1vcpu-1gb", "num_nodes": 1 \
 1325    "https://api.digitalocean.com/v2/databases"
 1326  curl -X POST   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   -d '{"name": "digitalocean-db-cluster-123456789", "engine": "mysql", "version": "8", "region": "blr1", "size": "db-s-1vcpu-1gb", "num_nodes": 1 \
 1327    "https://api.digitalocean.com/v2/databases"
 1328  curl -X POST   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   -d '{"name": "digitalocean-db-cluster-123456789", "engine": "mysql", "version": "8", "region": "blr1", "size": "db-s-1vcpu-1gb", "num_nodes": 1}'   "https://api.digitalocean.com/v2/databases"
 1329  exit
 1330  curl -X POST   -H "Content-Type: application/json"   -H "Authorization: Bearer 399c0f1542f8c45a696c4846d13ea8b21f5007ee603e1308a31dbe084ba0344f"   -d '{"name": "digitalocean-db-cluster-123456789", "engine": "mysql", "version": "8", "region": "blr1", "size": "db-s-1vcpu-1gb", "num_nodes": 1}'   "https://api.digitalocean.com/v2/databases"
 1331  exit
 1332  git branch
 1333  it clone --depth 1 --branch milestone/kubernetes-runner\
 1334  it clone --depth 1 --branch milestone/kubernetes-runner
 1335  git clone --depth 1 --branch milestone/kubernetes-runner
 1336  git checkout milestone/kubernetes-runner -b feature/kubernetes-cluster
 1337  clear
 1338  git branch
 1339  git checkout staging 
 1340  git merge vicara/staging 
 1341  clear\
 1342  clear
 1343  git branch
 1344  clear
 1345  git branch
 1346  git branch feature/kubernetes-cluster
 1347  clear
 1348  git branch
 1349  git checkout feature/kubernetes-cluster 
 1350  clear
 1351  KUBECONFIG
 1352  echo $KUBECONFIG
 1353  exit
 1354  git branch
 1355  exit
 1356  psql 
 1357  psql \c k8s
 1358  psql
 1359  docker image ls
 1360  docker image tag nginx localhost:5000/personal-organisation-samyak-gangwal/nginx
 1361  docker image push localhost:5000/personal-organisation-samyak-gangwal/nginx
 1362  docker login localhost:5000
 1363  docker image tag nginx localhost:5000/personal-organisation-rakhshith-ravi/nginx
 1364  docker image push localhost:5000/personal-organisation-rakhshith-ravi/nginx
 1365  docker login localhost:5000
 1366  docker image tag nginx localhost:5000/personal-organisation-rakshith-ravi/nginx
 1367  docker image push  localhost:5000/personal-organisation-rakshith-ravi/nginx
 1368  cat ~/.docker/config.json
 1369  kubectl create secret generic regcred     --from-file=.dockerconfigjson=~/.docker/config.json     --type=kubernetes.io/dockerconfigjson
 1370  kubectl create secret generic regcred     --from-file=.dockerconfigjson=~/.docker/config.json     --type=kubernetes.io/dockerconfigjson
 1371  cat ~/.docker/config.json
 1372  kubectl create secret generic regcred     --from-file=.dockerconfigjson=~/.docker/config.json     --type=kubernetes.io/dockerconfigjson
 1373  kubectl create secret generic regcred     --from-file=.dockerconfigjson='~/.docker/config.json'     --type=kubernetes.io/dockerconfigjson
 1374  kubectl create secret docker-registry regcred --docker-server=localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1375  kubectl get secret regcred --output=yaml
 1376  docker image push  localhost:5000/personal-organisation-rakshith-ravi/nginx
 1377  kubectl create secret docker-registry regcred --docker-server=http://localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1378  kubectl delete secret regcred
 1379  kubectl create secret docker-registry regcred --docker-server=http://localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1380  docker image push  localhost:5000/personal-organisation-rakshith-ravi/nginx
 1381  kubectl create secret docker-registry regcred --docker-server=localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1382  kubectl delete secret regcred
 1383  kubectl create secret docker-registry regcred --docker-server=localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1384  kubectl create secret docker-registry --help
 1385  kubectl create secret docker-registry regcred --docker-server=localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123 --dry-run='client'
 1386  kubectl --help
 1387  kubectl describe
 1388  kubectl decribe desployments
 1389  kubectl describe desployments
 1390  kubectl describe deployments
 1391  kubectl get namespace
 1392  kubectl get secrets
 1393  kubectl describe secrets
 1394  kubectl create secret docker-registry regcred --docker-server=localhost:5000 --docker-username=rakshith-ravi --docker-password=Vicara@123
 1395  docker image push  localhost:5000/personal-organisation-rakshith-ravi/nginx
 1396  docker image ls
 1397  kubectl describe deployments
 1398  cd Documents/
 1399  ls
 1400  kubectl apply -f test.yaml 
 1401  cd ..
 1402  kubectl get deployments
 1403  kubectl apply -f test.yaml 
 1404  kubectl apply -f Documents/test.yaml 
 1405  cd /etc
 1406  ls
 1407  cd docker
 1408  ls
 1409  cat key.json 
 1410  sudo cat key.json 
 1411  cd ..
 1412  nano /etc/docker/daemon.json
 1413  sudo nano /etc/docker/daemon.json
 1414  sudo service docker restart
 1415  cd ..
 1416  ls
 1417  cd home
 1418  cd ~
 1419  clear
 1420  kubectl apply -f Documents/test.yaml 
 1421  kubectl delete secret regcred
 1422  kubectl create secret docker-registry regcred --docker-server=registry.patr.cloud --docker-username=samyak-gangwal --docker-password=Vicara@123
 1423  docker image ls
 1424  docker image push localhost:5000/personal-organisation-rakshith-ravi/nginx
 1425  kubectl describe regcred
 1426  kubectl describe secrets
 1427  base64 decode eyJhbGciOiJSUzI1NiIsImtpZCI6InZScV85Mlo4blpBT09PRE5nMWIzZF9IN3loeFU2TTFqV1dqTV9SLTVMTFEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tNGx2ZGIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjMwY2UyOTY0LTdkYTUtNGU4Yy1iZmI1LWUxYjNjMzIxY2FjMCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.c9Cm5KmgDYbcbZfJfaBWZyRqw0lQHe_iyFoZa0EiRstyhyMeM1gE5kBbDMIlFKYDuQ8dderGxyZBUrbF9FLWhYUquZki2x2rRyYRVh4C6RHVuuXs9yNeV13B5PLDIJXJwSJ0Zi_lVO1NVBn37SsvlKfMMfY-O8WR2V1HLOcAbcz_aekeNdQq3fEu6AXe-goNO5lDYGWpYwqxQy8NA1hk93KK2b6LNyf6JCohUSI0cckOmZJY_JfcrlHAmU1em5k3Qx8Dy3iU0hSDHrBss8hd3_nzGLgb3yCLrkn-0q39IusiYVXsTKK2SmtjJct9-eA2V3MfwW9touqMbUAm1GoI1g
 1428  kubectl delete secret regcred
 1429  kubectl create secret docker-registry regcred --docker-server=registry.patr.cloud --docker-username=samyak-gangwal --docker-password=Vicara@123
 1430  docker image push localhost:5000/personal-organisation-rakshith-ravi/nginx
 1431  kubectl apply -f test2.yaml 
 1432  kubectl get deployments
 1433  kubectl apply -f test2.yaml 
 1434  kubectl exec --stdin --tty e58292d0536f4d128328495606ccec82 -- /bin/bash
 1435  kubectl apply -f test2.yaml 
 1436  kubectl exec --stdin --tty e58292d0536f4d128328495606ccec82 -- /bin/bash
 1437  kubectl apply -f test2.yaml 
 1438  kubectl apply -f Downloads/test.yaml 
 1439  kubectl apply -f Documents/test.yaml 
 1440  exit
 1441  kubectl
 1442  kubectl --version
 1443  kubectl get deployments
 1444  kubectl describe
 1445  kubectl describe deployments
 1446  clear
 1447  kubectl describe deployments
 1448  kubectl delete deploy kube-cluster
 1449  kubectl get deployments
 1450  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1451  kubectl get deployments
 1452  kubectl describe deployments
 1453  kubectl get deployments
 1454  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1455  kubectl get deployments
 1456  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1457  kubectl get deployments
 1458  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1459  kubectl get secret regcred --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode
 1460  kubectl get deployments
 1461  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1462  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1463  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1464  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1465  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1466  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1467  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1468  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1469  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1470  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1471  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1472  cat /etc/docker/daemon.json
 1473  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1474  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1475  kubectl get deployments
 1476  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1477  kubectl get deployments
 1478  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1479  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1480  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1481  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1482  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1483  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1484  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1485  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1486  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1487  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1488  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1489  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1490  kubectl delete secret regcred
 1491  kubectl create secret docker-registry regcred --docker-server=registry.patr.cloud --docker-username=samyak-gangwal --docker-password=Vicara@123
 1492  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1493  kubectl delete secret regcred
 1494  kubectl create secret docker-registry regcred --docker-server=registry.patr.cloud --docker-username=samyak-gangwal --docker-password=Vicara@123
 1495  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1496  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1497  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1498  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1499  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1500  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1501  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1502  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1503  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1504  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1505  kubectl --help
 1506  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1507  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1508  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1509  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1510  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1511  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1512  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1513  kubectl delete secret regcred
 1514  kubectl create secret docker-registry regcred --docker-server=registry.patr.cloud --docker-username=samyak-gangwal --docker-password=Vicara@123
 1515  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1516  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 1517  kubectl delete deploy e58292d0536f4d128328495606ccec82
 1518  kubectl logs deployment/manjeet
 1519  kubectl get deployments
 1520  minikube --status
 1521  minikube status
 1522  kubectl
 1523  kubectl describe
 1524  kubectl api-resources  describe
 1525  kubectl api-resources d
 1526  kubectl api-resources  describe
 1527  kubectl api-resources describe
 1528  kubectl api-resource describe
 1529  kubectl
 1530  kubectl config view
 1531  cd $HOME/.kube
 1532  ls
 1533  cat config
 1534  cat config.yaml
 1535  rm config.yaml
 1536  ls
 1537  cd cache/
 1538  ls
 1539  cd discovery/
 1540  ls
 1541  rm 788fe6b8_78e8_47d8_b060_6afb244b74d7.k8s.ondigitalocean.com/
 1542  cd 788fe6b8_78e8_47d8_b060_6afb244b74d7.k8s.ondigitalocean.com/
 1543  ls
 1544  cd ..
 1545  ls
 1546  mv config config.yaml
 1547  ls
 1548  cat c
 1549  cat config.yaml 
 1550  kubectl get nodes
 1551  cp config.yaml config
 1552  ls
 1553  clear
 1554  kubectl get nodes
 1555  exit
 1556  docker-compose up
 1557  clear
 1558  docker-compose up
 1559  exit
 1560  kubectl delete deployment/manjeet
 1561  kubectl logs deployment/manjeet
 1562  kubectl delete secret regcred
 1563  kubectl delete deployment/manjeet
 1564  kubectl logs deployment/manjeet
 1565  kubectl delete deployment/manjeet
 1566  kubectl get pods
 1567  kubectl logs deployment/manjeet
 1568  exit
 1569  cargo check
 1570  SQLX_OFFLINE=true cargo run
 1571  cargo run
 1572  SQLX_OFFLINE=true cargo urn
 1573  SQLX_OFFLINE=true cargo run
 1574  cargo populate
 1575  SQLX_OFFLINE=true cargo populate
 1576  SQLX_OFFLINE=true cargo run
 1577  clear
 1578  git branch
 1579  git checkout staging
 1580  echo $KUBECONFIG
 1581  git branch
 1582  git switch --help
 1583  git switch -c feature/kube-cluster
 1584  clear
 1585  cargo check
 1586  clear
 1587  cargo run
 1588  clear
 1589  cargo clean
 1590  clear
 1591  cargo run
 1592  clear
 1593  cargo run
 1594  exit
 1595  kubectl apply -f Documents/test.yaml 
 1596  curl -X GET   -H "Content-Type: application/json"   -H "Authorization: Bearer 3a48c171410cbe6422352628db32b8705b871d87a60bb7c879abef0a93342c8a"   "https://api.digitalocean.com/v2/registry/docker-credentials"
 1597  cd Downloads
 1598  nano config.json
 1599  kubectl apply -f Documents/test.yaml 
 1600  cd ..
 1601  kubectl apply -f Documents/test.yaml 
 1602  npm start
 1603  docker image push localhost:5000/personal-organisation-rakshith-ravi/nginx
 1604  kubectl get pods
 1605  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1606  kubectl get pods e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -o jsonpath='{.spec.containers[*].name}'
 1607  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1608  clear
 1609  exit
 1610  cat /etc/services 
 1611  exit
 1612  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1613  exit
 1614  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1615  kubectl get nodes -o wide
 1616  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1617  kubectl get nodes -o wide
 1618  kubectl get pods -o wide
 1619  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1620  cri
 1621  ctr
 1622  ctr image ls
 1623  sudo ctr image ls
 1624  sudo ctr container ls
 1625  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99  -- /bin/bash
 1626  kubectl get pods
 1627  kubectl exec -it deploymeents/e58292d0536f4d128328495606ccec82-
 1628  kubectl exec -it deploymeents/e58292d0536f4d128328495606ccec82
 1629  kubectl exec -it deploymeents/e58292d0536f4d128328495606ccec82 -- /bin/bash
 1630  kubectl exec -it deployments/e58292d0536f4d128328495606ccec82 -- /bin/bash
 1631  clear
 1632  kubectl get pods
 1633  keubectl remove deployment/manjeet
 1634  kubectl remove deployment/manjeet
 1635  kubectl remove deployments/manjeet
 1636  kubectl delete deployments/manjeet
 1637  clear
 1638  kubectl get pods
 1639  clear
 1640  kubectl get pods
 1641  kubectl exec -it deployments/e58292d0536f4d128328495606ccec82 -- /bin/bash
 1642  clear
 1643  kubectl get pods
 1644  ubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1645  clear
 1646  kubectl get pods
 1647  k,ubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1648  erts[y] 
 1649  ty ,ay pm
 1650  [tp 
 1651  p
 1652  ry 
 1653  Etp y'etypy etpy]\
 1654   p.ety\;
 1655   w5e[y
 1656  ][w rtp y
 1657  yp; 
 1658  clear
 1659  kubectl get pods
 1660  k,ubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1661  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1662  clear
 1663  kubectl get pods
 1664  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1665  exit
 1666  docker image ls
 1667  clear
 1668  docker container ls
 1669  exit
 1670  docker container prune
 1671  exit
 1672  kubectl get pods POD_NAME_HERE -o jsonpath='{.spec.containers[*].name}'
 1673  kubectl get pods
 1674  kubectl get pods deployments/e58292d0536f4d128328495606ccec82 -o jsonpath='{.spec.containers[*].name}'
 1675  kubectl get deployments deployments/e58292d0536f4d128328495606ccec82 -o jsonpath='{.spec.containers[*].name}'
 1676  kubectl get deployments/e58292d0536f4d128328495606ccec82 -o jsonpath='{.spec.containers[*].name}'
 1677  kubectl get pods e58292d0536f4d128328495606ccec82 -o jsonpath='{.spec.containers[*].name}'
 1678  kubectl get pods e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -o jsonpath='{.spec.containers[*].name}'
 1679  ctr
 1680  ctr container ls
 1681  ctr containers
 1682  sudo ctr containers
 1683  sudo ctr container ls
 1684  eval 
 1685  eval --help
 1686  eval $(kubernetes containerd-env)
 1687  eval $(kubectl containerd-env)
 1688  eval $(kubectl ctr)
 1689  kubelet
 1690  kubectl exec -it e58292d0536f4d128328495606ccec82-cd86688d-rsl99 -- bin/bash
 1691  vmip
 1692  kubectl get deployments
 1693  kubectl get logs deployments/e58292d0536f4d128328495606ccec82 
 1694  kubectl logs deployments/e58292d0536f4d128328495606ccec82 
 1695  keubectl get containers
 1696  kubectl get containers
 1697  docker-compose up
 1698  minikube status
 1699  kubectl
 1700  kubectl get pods
 1701  exit
 1702  docker image push localhost:5000/personal-organisation-rakshith-ravi/nginx
 1703  helm list
 1704  clear
 1705  helm list
 1706  helm uninstall nginx-ingress
 1707  clear
 1708  exit
 1709  git branch
 1710  exit
 1711  ssh root@68.183.81.238
 1712  exit
 1713  mv api new
 1714  sftp root@68.183.81.238
 1715  exit
 1716  kubectl get pods
 1717  kubectl get svc
 1718  kubectl get ingress
 1719  kubectl delete deployment e58292d0536f4d128328495606ccec82
 1720  kubectl delete service kubernetes-service  
 1721  kubectl delete ingress kubernetes-ingress
 1722  clear
 1723  helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true
 1724  exit
 1725  docker-compose up
 1726  exit
 1727  cargo run
 1728  git stash
 1729  git branch
 1730  git checkout staging
 1731  git checkout -b fix/hackathon
 1732  cargo +nightly fmt
 1733  cargo clippy
 1734  git push
 1735  git commit -m "removed certificate and https for patr"
 1736  git push
 1737  git push --set-upstream origin fix/hackathon
 1738  cargo build --release
 1739  git branch
 1740  git checkout vicara/staging 
 1741  git pull
 1742  git pull --all
 1743  git checkout fix/hackathon 
 1744  git merge vicara/staging
 1745  git push
 1746  git status
 1747  docker run --rm -v /home/samyak/home/samyak/vicara-api:/app -v /var/run/docker.sock:/var/run/docker.sock -it rust:latest /bin/bash
 1748  exit
 1749  docker image tag developerfolio registry.patr.cloud/personal-organisation-rakshith-ravi/developerfolio:latest
 1750  docker image ls
 1751  docker image tag developerfolio:v3 localhost:5000/personal-organisation-rakshith-ravi/developerfolio:latest
 1752  docker image push localhost:5000/personal-organisation-rakshith-ravi/developerfolio:latest
 1753  git branch
 1754  git checkout feature/kube-cluster 
 1755  git stash pop
 1756  git log
 1757  cargo +nightly fmt
 1758  cargo clippy
 1759  git add .
 1760  git commit -m "WIP: Kubernetes deployment"
 1761  git push
 1762  git push --set-upstream origin feature/kube-cluster
 1763  git checkout vicara/staging
 1764  git pull --all
 1765  git checkout staging
 1766  git checkout vicara/staging 
 1767  git checkout staging
 1768  git merge vicara/staging
 1769  git branch
 1770  git push
 1771  git checkout feature/kube-cluster 
 1772  git merge staging
 1773  git push
 1774  git branch
 1775  git push
 1776  npm start
 1777  git pull
 1778  npm start
 1779  npm install
 1780  npm start
 1781  git branch
 1782  git checkout fix/hackathon 
 1783  git branch
 1784  exit
 1785  ssh root@68.183.81.238
 1786  exit
 1787  cd Downloads
 1788  mkdir temp_hackathon
 1789  cd temp_hackathon/
 1790  git clone git@github.com:manitmittal/Trade-Arena-By-TeamOne.git
 1791  env\Scripts\activate
 1792  env/Scripts/activate
 1793  ls
 1794  cd Trade-Arena-By-TeamOne/
 1795  clear
 1796  ./env/Scripts/activate
 1797  sudo ./env/Scripts/activate
 1798  ls
 1799  cd erv
 1800  cd env
 1801  ls
 1802  cd Scripts/
 1803  ls
 1804  ./activate
 1805  cd ..
 1806  ls
 1807  pip install -r requirements.txt 
 1808  sudo pip install -r requirements.txt 
 1809  ls
 1810  cd ..
 1811  ls
 1812  cd Trade-Arena-By-TeamOne/
 1813  ls
 1814  cd e
 1815  cd env/
 1816  ls
 1817  cd Scripts/
 1818  ls
 1819  cd ..
 1820  pip uninstall requirements.txt q
 1821  pip uninstall requirements.txt 
 1822  pip uninstall -r requirements.txt 
 1823  pip uninstall -r requirements.txt -a
 1824  pip uninstall -r requirements.txt
 1825  clear
 1826  cd ..
 1827  git clone git@github.com:BinayakBishnu/Devjams-Invincible-Coders.git
 1828  cd Devjams-Invincible-Coders/
 1829  ls
 1830  pip install -r requirements.txt 
 1831  python3 -m pip install --upgrade pip
 1832  python3 final.py 
 1833  ls
 1834  cat final.py 
 1835  cat requirements.txt 
 1836  virtualenv venv 
 1837  python -m pip install virtualenv 
 1838  python3 -m pip install virtualenv 
 1839  virtualenv venv 
 1840  ls
 1841  cd venv/
 1842  ls
 1843  cd ..
 1844  source venv/bin/activate
 1845  pip install -r requirements.txt
 1846  python3 final.py 
 1847  deactivate 
 1848  pip uninstall -r requirements.txt 
 1849  cd ..
 1850  cd Trade-Arena-By-TeamOne/
 1851  ls
 1852  virtualenv venv 
 1853  python3 -m pip install virtualenv 
 1854  virtualenv venve 
 1855  source venv/bin/activate
 1856  pip install -r requirements.txt
 1857  flask run
 1858  sudo apt install python3-flask
 1859  flask run
 1860  pip install -r requirements.txt
 1861  nano requirements.txt 
 1862  pip install -r requirements.txt
 1863  deactivate
 1864  cd ..
 1865  ls
 1866  cd D
 1867  cd Devjams-Invincible-Coders/
 1868  source venv/bin/activate
 1869  ls
 1870  python3 final.py 
 1871  cd home/samyak/
 1872  git clone https://develop.vicara.co/manjeet.arneja/PATR-for-dummies.git
 1873  cd PATR-for-dummies/
 1874  ls
 1875  git add .
 1876  git commit -m "Added the docs for ip-address and domain"
 1877  git config user.name "Samyak Gangwal"
 1878  git config user.email samyak.gangwal@vicara.co
 1879  git switch -c fix/domain-ip
 1880  git push
 1881  git push --set-upstream origin fix/domain-ip
 1882  docker-compose up
 1883  clear
 1884  git checkout feature/kube-cluster \
 1885  git checkout feature/kube-cluster\
 1886  git checkout feature/kube-cluster
 1887  clear
 1888  kubectl get deployments
 1889  kubectl delete 0610bf62ce86470b84c254f2e29b8329
 1890  kubectl delete delete 0610bf62ce86470b84c254f2e29b8329
 1891  clear
 1892  kubectl delete deployment/0610bf62ce86470b84c254f2e29b8329
 1893  clear
 1894  kubectl get service
 1895  kubectl get ingress
 1896  clear
 1897  kubectl get ns
 1898  exiit
 1899  clear
 1900  cargo run
 1901  git pull --all
 1902  git branch
 1903  git remote
 1904  clear
 1905  npm start
 1906  exit
 1907  docker image push registry.patr.cloud/personal-organisation-rakshith-ravi/developerfolio:latest
 1908  docker image push localhost:5000/personal-organisation-rakshith-ravi/developerfolio:latest
 1909  curl test.samyak.tk
 1910  docker image push localhost:5000/personal-organisation-rakshith-ravi/developerfolio:latest
 1911  docker image ls
 1912  clear
 1913  kubectl get deployments
 1914  kubectl get svc
 1915  kubectl get ingress
 1916  kubectl describe ingress
 1917  kubectl get ingress 
 1918  kubectl get ingress ingress-0610bf62ce86470b84c254f2e29b8329 -o yaml
 1919  kubectl get ingress
 1920  kubectl get deployments
 1921  kubectl get pods
 1922  kubectl exec -it 0610bf62ce86470b84c254f2e29b8329-7c6fbff9d5-b9fsb -- bash
 1923  kubectl get deployments
 1924  kubectl delete 0610bf62ce86470b84c254f2e29b8329
 1925  kubectl delete deployment/0610bf62ce86470b84c254f2e29b8329
 1926  kubectl get svc
 1927  kubectl delete svc/service-0610bf62ce86470b84c254f2e29b8329
 1928  kubectl get ingress
 1929  kubectl delete/ingress-0610bf62ce86470b84c254f2e29b8329
 1930  kubectl delete ingress/ingress-0610bf62ce86470b84c254f2e29b8329
 1931  kubectl get --help
 1932  kubectl get -A
 1933  clear
 1934  kubectl get ingress
 1935  kubectl get service
 1936  kubectl get ingress -o wide
 1937  kubectl get service -o wide
 1938  kubectl get deployments -o wide
 1939  kubectl describe deployment 0610bf62ce86470b84c254f2e29b8329
 1940  clear
 1941  kubectl describe deployment 0610bf62ce86470b84c254f2e29b8329
 1942  kubectl get svc
 1943  kubectl get ingress
 1944  kubectl get ingress -o wide
 1945  kubectl get svc -o wide
 1946  kubectl get ingress
 1947  kubectl get po,svc -A
 1948  kubectl get svc
 1949  kubectl exec -it 0610bf62ce86470b84c254f2e29b8329-7c6fbff9d5-b9fsb -- bash
 1950  10.245.6.238
 1951  kubectl get pods
 1952  kubectl exec -it 0610bf62ce86470b84c254f2e29b8329-7c6fbff9d5-jq7dn -- bash
 1953  kubectl exec -it 0610bf62ce86470b84c254f2e29b8329-54d8dd8f6f-jq7dn -- bash
 1954  kubectl get ingress
 1955  kubectl describe ingress/ingress-0610bf62ce86470b84c254f2e29b8329
 1956  kubectl delete ingress/ingress-0610bf62ce86470b84c254f2e29b8329
 1957  kubectl describe ingress/ingress-0610bf62ce86470b84c254f2e29b8329
 1958  cargo +nightly fmt
 1959  git add .
 1960  git commit -m "deployment now works, things remaining: updating the deployment, stop, start, delete structure and ingress is not updated when you patch it"
 1961  git push
 1962  docker-compose up
 1963  cargo run
 1964  exit
 1965  git status
 1966  clear
 1967  git branch
 1968  clear
 1969  exit
 1970  cd home
 1971  cd samyak/
 1972  cd kubernetes_app/
 1973  code .
 1974  exit
 1975  cargo run
 1976  clear
 1977  cargo run
 1978  clear
 1979  cargo run
 1980  exit
 1981  kubectl get deployments
 1982  exit
 1983  npm start
 1984  clear
 1985  cargo run
 1986  clear
 1987  cargo check
 1988  clear
 1989  cargo check
 1990  clear
 1991  cargo check
 1992  clear
 1993  cargo clean
 1994  kubectl get ingress
 1995  kubectl describe ingress-0610bf62ce86470b84c254f2e29b8329
 1996  kubectl describe ingress ingress-0610bf62ce86470b84c254f2e29b8329
 1997  kubectl describe ingress ingress-0610bf62ce86470b84c254f2e29b8329 -o yaml
 1998  kubectl get ingress/ingress-0610bf62ce86470b84c254f2e29b8329 -o yaml
 1999  cargo +nightly fmt
 2000  kubectl get deployment --help
 2001  kubectl get deployment
 2002  kubectl get deployment/0610bf62ce86470b84c254f2e29b8329
 2003  kubectl describe deployment/0610bf62ce86470b84c254f2e29b8329
 2004  kubectl delete deployment/0610bf62ce86470b84c254f2e29b8329
 2005  kubectl get service
 2006  kubectl delete service/service-0610bf62ce86470b84c254f2e29b8329
 2007  kubectl get ingress
 2008  kubectl delete ingress/ingress-0610bf62ce86470b84c254f2e29b8329
 2009  kubectl get deployments
 2010  kubectl get ingress
 2011  kubectl get deployment
 2012  kubectl get ingress
 2013  kubectl get deployment
 2014  kubectl get logs deployment/e58292d0536f4d128328495606ccec82
 2015  kubectl logs deployment/e58292d0536f4d128328495606ccec82
 2016  kubectl logs e58292d0536f4d128328495606ccec82
 2017  kubectl get pods
 2018  kubectl get logs/e58292d0536f4d128328495606ccec82-648d5f9546-jjmdj
 2019  kubectl logs pod/e58292d0536f4d128328495606ccec82-648d5f9546-jjmdj
 2020  kubectl get pods
 2021  history > history.txt
